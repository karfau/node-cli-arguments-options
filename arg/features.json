{
  "$schema": "https://github.com/karfau/node-cli-arguments-options/raw/master/features.json",
  "$comment": "Features available in package 'arg'.",
  "options": {
    "$comment": "Options are arguments that start with at least one hyphen",
    "unknown": {
      "$comment": "Describes how options are treated that have not been configured but are present in argv",
      "exit": {
        "$comment": "Can parsing unknown options cause a call to `process.exit()`?",
        "default": {
          "node ./dump.js --unknown": {
            "exitCode": 1,
            "stderr": "Error: Unknown or unexpected option: --unknown"
          }
        },
        "comments": [
          "It actually throws an error, so you can catch it and check it's code."
        ]
      },
      "generic": {
        "$comment": "Can unknown options be present in the parsed output?",
        "configurable": {
          "arg({}, {permissive:true, argv: ['--unknown']})": {
            "value": {
              "_": [
                "--unknown"
              ]
            }
          }
        },
        "code": {
          "node ./readme.arg_unknown_option.js --unknown": "ARG_UNKNOWN_OPTION"
        },
        "references": [
          "https://github.com/zeit/arg#arg_unknown_option"
        ]
      },
      "handler": {
        "$comment": "Is it possible to configure a method that will be invoked for unknown options?",
        "configurable": {
          "arg({}, {permissive:true, argv: ['--unknown']})": {
            "value": {
              "_": [
                "--unknown"
              ]
            }
          }
        },
        "code": {
          "node ./readme.arg_unknown_option.js --unknown": "ARG_UNKNOWN_OPTION"
        },
        "references": [
          "https://github.com/zeit/arg#arg_unknown_option"
        ]
      },
      "throws": {
        "$comment": "Can parsing unknown options cause the process to throw an Error?",
        "default": {
          "node ./dump.js --unknown": {
            "exitCode": 1,
            "stderr": "Error: Unknown or unexpected option: --unknown"
          }
        },
        "references": [
          "https://github.com/zeit/arg#arg_unknown_option"
        ]
      }
    },
    "types": {
      "$comment": "About the possible types for option values",
      "flag": {
        "$comment": "Can an option be passed without value to set it to true?",
        "configurable": {
          "node ./dump.js --flag": {
            "value": {
              "options": {
                "--flag": true
              }
            }
          }
        }
      },
      "boolean": {
        "$comment": "Can an option be passed a boolean value to set it to true or false?",
        "code": {
          "node ./dump.js --bool=true": {
            "value": {
              "options": {
                "--bool": true
              }
            }
          },
          "node ./dump.js --bool=false": {
            "value": {
              "options": {
                "--bool": false
              }
            }
          }
        }
      },
      "negated": {
        "$comment": "Can flags be passed with a prefix to set the value to false?",
        "unsupported": true,
        "comments": [
          "I tried to use `arg.flag((_, name) => name === '--neg')` with an alias but `name` is always the non alias.",
          "I had no more ideas beside (tricky) postprocessing of both --neg and --no-neg flags."
        ]
      },
      "default-string": {
        "$comment": "Can a default string be configured when the option is passed as a flag?",
        "unsupported": true,
        "comments": [
          "Options can either be a flag (using `Boolean` or `arg.flag`) or receive values, not both.",
          "I didn't expect that when reading the docs."
        ],
        "references": [
          "https://github.com/zeit/arg#usage",
          "https://github.com/zeit/arg/issues/43"
        ]
      },
      "string": {
        "$comment": "Can an option be passed any value that will be treated as a string?",
        "configurable": {
          "node ./dump.js --str xyz": {
            "value": {
              "options": {
                "--str": "xyz"
              }
            }
          },
          "node ./dump.js --str=xyz": {
            "value": {
              "options": {
                "--str": "xyz"
              }
            }
          }
        }
      },
      "number": {
        "$comment": "What are the options for converting values to JS number type?",
        "configurable": {
          "node ./dump.js --num 0.5": {
            "value": {
              "options": {
                "--num": 0.5
              }
            }
          },
          "node ./dump.js --num=-1.0": {
            "value": {
              "options": {
                "--num": -1
              }
            }
          }
        },
        "references": [
          "https://github.com/zeit/arg/issues/52"
        ]
      },
      "integer": {
        "$comment": "What are the options for converting values to integer values?",
        "configurable": {
          "node ./dump.js --int 100": {
            "value": {
              "options": {
                "--int": 100
              }
            }
          },
          "node ./dump.js --int=-123": {
            "value": {
              "options": {
                "--int": -123
              }
            }
          }
        },
        "references": [
          "https://github.com/zeit/arg/issues/52"
        ]
      },
      "count": {
        "$comment": "Is there an option to count the number of times an option(/flag) has been passed?",
        "configurable": {
          "node ./dump.js --count": {
            "value": {
              "options": {
                "--count": 1
              }
            }
          },
          "node ./dump.js --count --count": {
            "value": {
              "options": {
                "--count": 2
              }
            }
          }
        }
      },
      "custom": {
        "$comment": "Is it possible to configure custom option types?",
        "code": {
          "node ./dump.js --date=2019-12-31": {
            "value": {
              "options": {
                "--date": 1577750400000
              }
            }
          }
        }
      },
      "lists": {
        "$comment": "Types for options that can result in multiple values (see options.syntax.* for details on how to pass them)",
        "array": {
          "$comment": "Is it possible to configure options to always be a list of values?",
          "configurable": {
            "node ./dump.js --arr abc": {
              "value": {
                "options": {
                  "--arr": [
                    "abc"
                  ]
                }
              }
            },
            "node ./dump.js --arr=abc": {
              "value": {
                "options": {
                  "--arr": [
                    "abc"
                  ]
                }
              }
            },
            "node ./dump.js --arr=abc --arr def": {
              "value": {
                "options": {
                  "--arr": [
                    "abc",
                    "def"
                  ]
                }
              }
            },
            "node ./dump.js --arr=abc --arr=def": {
              "value": {
                "options": {
                  "--arr": [
                    "abc",
                    "def"
                  ]
                }
              }
            }
          }
        },
        "typed-items": {
          "$comment": "Can the type of the items be configured?",
          "mandatory": true,
          "comments": [
            "Just wrapping the function to create element into an array creates any typed values."
          ],
          "references": [
            "https://github.com/zeit/arg#usage"
          ]
        }
      }
    },
    "aliases": {
      "$comment": "Aliases are the short form of options",
      "alias": {
        "$comment": "Can aliases be configured for options?",
        "configurable": {
          "arg({'--arg': Boolean, '-a': '--arg'},{argv:['-a']})": {
            "value": {
              "--arg": true
            }
          }
        }
      },
      "abbreviations": {
        "$comment": "Are all possible distinct shortcuts for configured options automatically detected?",
        "unsupported": true,
        "comments": [
          "could be achieved by mapping all aliases, e.g. by using a tool"
        ]
      },
      "in-output": {
        "$comment": "Are the aliases present as keys in the object returned?",
        "unsupported": true,
        "comments": [
          "see output of option.aliases.alias"
        ]
      }
    },
    "syntax": {
      "$comment": "Allowed syntax for passing values for options",
      "short-space-value": {
        "$comment": "Is `-<single letter option> <value>` possible?",
        "default": {}
      },
      "long-space-value": {
        "$comment": "Is `--<multiple letter option> <value>` possible?",
        "default": {}
      },
      "long-equal-value": {
        "$comment": "Is `--<multiple letter option>=<value>` possible?",
        "default": {}
      },
      "csv-value": {
        "$comment": "Is `--<multiple letter option>=<value>[,<value,...]` possible?",
        "code": {},
        "comments": [
          "can be implemented as a custom type"
        ]
      },
      "repeated": {
        "$comment": "Is it possible to pass an option multiple times to collect values?",
        "configurable": {}
      },
      "multiple": {
        "$comment": "Is it possible to pass multiple values after a single option?",
        "unsupported": false
      }
    }
  }
}
