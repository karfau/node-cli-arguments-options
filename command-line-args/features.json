{
  "$schema": "https://github.com/karfau/node-cli-arguments-options/raw/master/features.json",
  "$comment": "Features available in package 'command-line-args'.",
  "options": {
    "$comment": "Options are arguments that start with at least one hyphen",
    "unknown": {
      "$comment": "Describes how options are treated that have not been configured but are present in argv",
      "exit": {
        "$comment": "Can parsing unknown options cause a call to `process.exit()`?",
        "code": {
          "node ./features.options.unknown.exit.js --unknown": {
            "exitCode": 11,
            "stderr": "UNKNOWN_OPTION ; Unknown option: --unknown"
          }
        }
      },
      "generic": {
        "$comment": "Can unknown options be present in the parsed output?",
        "code": {
          "node ./features.options.unknown.exit.js --partial --unknown --known": {
            "value": {
              "_unknown": [
                "--unknown"
              ],
              "known": true
            }
          },
          "node ./features.options.unknown.exit.js --stop --unknown --known": {
            "value": {
              "_unknown": [
                "--unknown",
                "--known"
              ]
            }
          }
        }
      },
      "handler": {
        "$comment": "Is it possible to configure a method that will be invoked for unknown options?",
        "unsupported": true,
        "comments": [
          "There is no specific mention in the docs, but it's easy to deal with the unknowns in post processing."
        ],
        "references": [
          "https://github.com/75lb/command-line-args/blob/master/doc/API.md"
        ]
      },
      "throws": {
        "$comment": "Can parsing unknown options cause the process to throw an Error?",
        "default": {
          "node ./features.options.unknown.exit.js --unknown": {
            "exitCode": 11,
            "stderr": "UNKNOWN_OPTION ; Unknown option: --unknown"
          }
        }
      }
    },
    "types": {
      "$comment": "About the possible types for option values",
      "flag": {
        "$comment": "Can an option be passed without value to set it to true?",
        "configurable": {
          "node ./dump.js --flag": {
            "value": {
              "options": {
                "flag": true
              }
            }
          }
        }
      },
      "boolean": {
        "$comment": "Can an option be passed a boolean value to set it to true or false?",
        "configurable": {
          "node ./dump.js --flag true": {
            "value": {
              "options": {
                "flag": true
              }
            }
          }
        },
        "comments": [
          "TODO: not sure it is possible to set the flag to `false` explicitly"
        ]
      },
      "negated": {
        "$comment": "Can flags be passed with a prefix to set the value to false?",
        "unsupported": false
      },
      "default-string": {
        "$comment": "Can a default string be configured when the option is passed as a flag?",
        "configurable": {},
        "references": [
          "https://github.com/75lb/command-line-args/wiki/Option-definition-reference#module_definition--OptionDefinition.OptionDefinition+defaultValue"
        ]
      },
      "string": {
        "$comment": "Can an option be passed any value that will be treated as a string?",
        "configurable": {
          "node ./dump.js --str 5": {
            "value": {
              "options": {
                "str": "5"
              }
            }
          }
        }
      },
      "number": {
        "$comment": "What are the options for converting values to JS number type?",
        "configurable": {
          "node ./dump.js --num 0.5": {
            "value": {
              "options": {
                "num": 0.5
              }
            }
          },
          "node ./dump.js --num=-1.0": {
            "value": {
              "options": {
                "num": -1
              }
            }
          }
        }
      },
      "integer": {
        "$comment": "What are the options for converting values to integer values?",
        "configurable": {
          "node ./dump.js --int 100": {
            "value": {
              "options": {
                "int": 100
              }
            }
          },
          "node ./dump.js --int=-123.5": {
            "value": {
              "options": {
                "int": -123
              }
            }
          }
        }
      },
      "count": {
        "$comment": "Is there an option to count the number of times an option(/flag) has been passed?",
        "unsupported": true,
        "comments": [
          "Can easily be achieved by post processing, see ./dump.js"
        ]
      },
      "custom": {
        "$comment": "Is it possible to configure custom option types?",
        "code": {
          "node ./dump.js --date 2019-12-31": {
            "value": {
              "options": {
                "date": 1577750400000
              }
            }
          }
        },
        "references": [
          "https://github.com/75lb/command-line-args/wiki/Option-definition-reference#module_definition--OptionDefinition.OptionDefinition+type",
          "https://github.com/75lb/command-line-args/wiki/Custom-type-example"
        ]
      },
      "lists": {
        "$comment": "Types for options that can result in multiple values (see options.syntax.* for details on how to pass them)",
        "array": {
          "$comment": "Is it possible to configure options to always be a list of values?"
        },
        "typed-items": {
          "$comment": "Can the type of the items be configured?"
        }
      }
    },
    "aliases": {
      "$comment": "Aliases are the short form of options",
      "alias": {
        "$comment": "Can aliases be configured for options?"
      },
      "abbreviations": {
        "$comment": "Are all possible distinct shortcuts for configured options automatically detected?"
      },
      "in-output": {
        "$comment": "Are the aliases present as keys in the object returned?"
      }
    },
    "syntax": {
      "$comment": "Allowed syntax for passing values for options",
      "short-space-value": {
        "$comment": "Is `-<single letter option> <value>` possible?"
      },
      "long-space-value": {
        "$comment": "Is `--<multiple letter option> <value>` possible?"
      },
      "long-equal-value": {
        "$comment": "Is `--<multiple letter option>=<value>` possible?"
      },
      "csv-value": {
        "$comment": "Is `--<multiple letter option>=<value>[,<value,...]` possible?"
      },
      "repeated": {
        "$comment": "Is it possible to pass an option multiple times to collect values?"
      },
      "multiple": {
        "$comment": "Is it possible to pass multiple values after a single option?"
      }
    }
  }
}
